{"version":3,"sources":["pages/employeeTable/components/header/Header.js","pages/employeeTable/components/table/DataTable.js","pages/employeeTable/components/content/Content.js","pages/employeeTable/EmployeeTable.js","pages/employeeProfile/components/profile-header/ProfileHeader.js","pages/employeeProfile/components/profile-content/ProfileContent.js","pages/employeeProfile/EmployeeProfile.js","App.js","serviceWorker.js","store/reducers/employeeReducer.js","index.js"],"names":["Header","className","Jumbotron","fluid","Container","Breadcrumb","Item","href","DataTable","setLocalStorage","data","localStorage","setItem","name","email","department","designation","phone_number","image","this","props","tableHeads","isAttendanceTable","tableHead","map","th","index","key","tableData","id","to","onClick","lastSeen","start_time","end_time","duration","Table","striped","hover","responsive","Component","Content","EmployeeTable","employeeData","connect","state","ProfileHeader","getItem","src","alt","Badge","pill","variant","getDuration","time1","time2","min","time_1","slice","indexOf","split","time_2","hours","parseInt","ProfileContent","attendanceData","employees","useParams","employeeAttendanceData","filter","employee","attendances","App","exact","path","Boolean","window","location","hostname","match","require","initialState","temp","length","getEmployeeData","reducer","newState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d294e90e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Breadcrumb from \"react-bootstrap/Breadcrumb\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <Jumbotron className=\"header-jumbotron\" fluid>\r\n        <Container>\r\n          <Breadcrumb className=\"breadcrumb\">\r\n            <Breadcrumb.Item className=\"breadcrumb-item\" href=\"#\">\r\n              Employee data visualization\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        </Container>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nexport default class DataTable extends Component {\r\n  setLocalStorage = data => {\r\n    localStorage.setItem(\"name\", data.name);\r\n    localStorage.setItem(\"email\", data.email);\r\n    localStorage.setItem(\"department\", data.department);\r\n    localStorage.setItem(\"designation\", data.designation);\r\n    localStorage.setItem(\"phone_number\", data.phone_number);\r\n    localStorage.setItem(\"src\", data.image);\r\n  };\r\n\r\n  render() {\r\n    const { tableHeads, data, isAttendanceTable } = this.props;\r\n    const tableHead = tableHeads.map((th, index) => {\r\n      return <th key={`abs${index}`}>{th}</th>;\r\n    });\r\n\r\n    const tableData = data.map((data, index) => {\r\n      return isAttendanceTable === false ? (\r\n        <tr key={data.id}>\r\n          <td>\r\n            <Link\r\n              to={`profile/${data.id}`}\r\n              onClick={() => this.setLocalStorage(data)}\r\n            >\r\n              {data.name}\r\n            </Link>\r\n          </td>\r\n          <td>{data.email}</td>\r\n          <td>{data.department}</td>\r\n          <td>{data.lastSeen}</td>\r\n        </tr>\r\n      ) : (\r\n        <tr key={`${index}abcx${index}`}>\r\n          <td>{data.start_time}</td>\r\n          <td>{data.end_time}</td>\r\n          <td>{data.duration}</td>\r\n        </tr>\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"data-table\">\r\n        <Table striped hover responsive=\"md\">\r\n          <thead>\r\n            <tr>{tableHead}</tr>\r\n          </thead>\r\n          <tbody>{tableData}</tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nimport DataTable from \"../table/DataTable\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nexport default function Content(props) {\r\n  const { data } = props;\r\n  return (\r\n    <div className=\"content\">\r\n      <Container>\r\n        <h1 className=\"content-title\">Employee Table</h1>\r\n        <DataTable\r\n          tableHeads={[\"Name\", \"Email\", \"Department\", \"Last seen\"]}\r\n          data={data}\r\n          isAttendanceTable={false}\r\n        />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Header from \"./components/header/Header\";\r\nimport Content from \"./components/content/Content\";\r\n\r\nclass EmployeeTable extends Component {\r\n  render() {\r\n    const { employeeData } = this.props;\r\n    return (\r\n      <div className=\"employee-table\">\r\n        <Header />\r\n        <Content data={employeeData} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    employeeData: state.employeeData\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(EmployeeTable);\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\n\r\nexport default function ProfileHeader() {\r\n  const name = localStorage.getItem(\"name\");\r\n  const department = localStorage.getItem(\"department\");\r\n  const src = localStorage.getItem(\"src\");\r\n  const designation = localStorage.getItem(\"designation\");\r\n  const phone_number = localStorage.getItem(\"phone_number\");\r\n  return (\r\n    <div className=\"profile-header\">\r\n      <Jumbotron className=\"header-jumbotron profile-header-jumbotron\" fluid>\r\n        <Container className=\"employee-details\">\r\n          <div className=\"employee-avatar\">\r\n            <img src={src} alt={`${name}'s avatar`} />\r\n          </div>\r\n          <div className=\"employee-info\">\r\n            <h2>{name}</h2>\r\n          </div>\r\n          <div className=\"badges\">\r\n            <h3>\r\n              <Badge pill variant=\"secondary\">\r\n                {department}\r\n              </Badge>\r\n            </h3>\r\n            <h3>\r\n              <Badge pill variant=\"secondary\">\r\n                {designation}\r\n              </Badge>\r\n            </h3>\r\n            <h3>\r\n              <Badge pill variant=\"secondary\">\r\n                {phone_number}\r\n              </Badge>\r\n            </h3>\r\n          </div>\r\n        </Container>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nimport DataTable from \"../../../employeeTable/components/table/DataTable\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst getDuration = (time1, time2) => {\r\n  let time_1 = time1\r\n    .slice(time1.indexOf(\"T\") + 1, time1.indexOf(\"Z\"))\r\n    .split(\":\");\r\n  let time_2 = time2\r\n    .slice(time2.indexOf(\"T\") + 1, time2.indexOf(\"Z\"))\r\n    .split(\":\");\r\n\r\n  var hours = parseInt(time_2[0]) + 12 - parseInt(time_1[0]);\r\n\r\n  var min;\r\n  if (parseInt(time_1[1]) < parseInt(time_2[1])) {\r\n    min = parseInt(time_2[1]) - parseInt(time_1[1]);\r\n  } else if (parseInt(time_1[1]) > parseInt(time_2[1])) {\r\n    hours--;\r\n    min = 60 - (parseInt(time_1[1]) - parseInt(time_2[1]));\r\n  } else {\r\n    min = \"00\";\r\n  }\r\n\r\n  return `${hours}:${min}`;\r\n};\r\n\r\nexport default function ProfileContent(props) {\r\n  const attendanceData = props.attendanceData.map(data => {\r\n    return {\r\n      start_time: data.start_time,\r\n      end_time: data.end_time,\r\n      duration: getDuration(data.start_time, data.end_time)\r\n    };\r\n  });\r\n  return (\r\n    <div className=\"profile-content\">\r\n      <Container>\r\n        <h1 className=\"content-title\">Attandance Table</h1>\r\n        <DataTable\r\n          tableHeads={[\"Entry\", \"Exit\", \"Duration\"]}\r\n          data={attendanceData}\r\n          isAttendanceTable={true}\r\n        />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport ProfileHeader from \"./components/profile-header/ProfileHeader\";\r\nimport ProfileContent from \"./components/profile-content/ProfileContent\";\r\n\r\nfunction EmployeeProfile(props) {\r\n  const { id } = useParams();\r\n  const { employees } = props;\r\n  const employee = employees.filter(employee => {\r\n    return employee.id === id;\r\n  });\r\n  const employeeAttendanceData = employee[0].attendances;\r\n  return (\r\n    <div className=\"employee-profile\">\r\n      <ProfileHeader />\r\n      <ProfileContent attendanceData={employeeAttendanceData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    employees: state.employees\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(EmployeeProfile);\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport EmployeeTable from \"./pages/employeeTable/EmployeeTable\";\nimport EmployeeProfile from \"./pages/employeeProfile/EmployeeProfile\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Route exact path=\"/\">\n          <EmployeeTable />\n        </Route>\n        <Route path=\"/profile/:id\">\n          <EmployeeProfile />\n        </Route>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// requiring employee.json file\r\nconst employees = require(\"../employees.json\");\r\n\r\n//this method will extract all the required information from the json file\r\nconst getEmployeeData = data => {\r\n  let employeeData = [];\r\n\r\n  let temp = data.map(employee => {\r\n    return {\r\n      id: employee.id,\r\n      name: employee.name,\r\n      email: employee.email,\r\n      department: employee.department,\r\n      designation: employee.designation,\r\n      image: employee.image,\r\n      phone_number: employee.phone_number,\r\n      lastSeen: employee.attendances[employee.attendances.length - 1].end_time\r\n    };\r\n  });\r\n\r\n  employeeData = [...temp];\r\n\r\n  return employeeData;\r\n};\r\n\r\n// initializing initial state for this reducer\r\nconst initialState = {\r\n  employees: employees,\r\n  employeeData: getEmployeeData(employees)\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  let newState = { ...state };\r\n\r\n  return newState;\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport reducer from \"./store/reducers/employeeReducer\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}